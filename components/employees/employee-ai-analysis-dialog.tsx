"use client"

import { useState } from "react"
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Separator } from "@/components/ui/separator"
import { 
  Brain, 
  Loader2, 
  Download, 
  RefreshCw, 
  Calendar,
  User,
  AlertCircle,
  CheckCircle,
  X
} from "lucide-react"
import { toast } from "sonner"
import ReactMarkdown from 'react-markdown'
import type { EmployeeDetail } from "@/types/employee"

interface EmployeeAIAnalysisDialogProps {
  employee: EmployeeDetail
  isOpen: boolean
  onClose: () => void
}

interface AnalysisData {
  analysis: string
  employeeName: string
  analysisDate: string
}

export function EmployeeAIAnalysisDialog({ employee, isOpen, onClose }: EmployeeAIAnalysisDialogProps) {
  const [isAnalyzing, setIsAnalyzing] = useState(false)
  const [analysisData, setAnalysisData] = useState<AnalysisData | null>(null)
  const [error, setError] = useState<string | null>(null)

  const handleAnalyzeEmployee = async () => {
    try {
      setIsAnalyzing(true)
      setError(null)
      
      const response = await fetch('/api/ai/employee-analysis', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          employeeData: employee
        }),
      })

      const data = await response.json()

      if (data.success) {
        setAnalysisData(data.data)
        toast.success('AI analysis completed successfully!')
      } else {
        throw new Error(data.message || 'Failed to analyze employee data')
      }
    } catch (error) {
      console.error('Error analyzing employee:', error)
      const errorMessage = error instanceof Error ? error.message : 'Failed to analyze employee data'
      setError(errorMessage)
      toast.error(errorMessage)
    } finally {
      setIsAnalyzing(false)
    }
  }

  const handleDownloadReport = () => {
    if (!analysisData) return

    const reportContent = `# Employee AI Analysis Report

**Employee:** ${analysisData.employeeName}
**Generated:** ${new Date(analysisData.analysisDate).toLocaleString()}

---

${analysisData.analysis}

---

*Generated by FMMS 360 AI Assistant*
`

    const blob = new Blob([reportContent], { type: 'text/markdown' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `${analysisData.employeeName.replace(/\s+/g, '_')}_AI_Analysis_Report.md`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
    
    toast.success('Report downloaded successfully!')
  }

  const handleNewAnalysis = () => {
    setAnalysisData(null)
    setError(null)
  }

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    })
  }

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-4xl max-h-[90vh] flex flex-col">
        <DialogHeader>
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="p-2 rounded-lg bg-gradient-to-br from-purple-100 to-blue-100">
                <Brain className="h-6 w-6 text-purple-600" />
              </div>
              <div>
                <DialogTitle className="text-xl font-bold">
                  AI Employee Analysis
                </DialogTitle>
                <DialogDescription>
                  Get AI-powered insights and optimization recommendations for {employee.name}
                </DialogDescription>
              </div>
            </div>
            <Button variant="ghost" size="sm" onClick={onClose}>
              <X className="h-4 w-4" />
            </Button>
          </div>
        </DialogHeader>

        <div className="flex-1 flex flex-col min-h-0">
          {!analysisData && !error && (
            <div className="flex-1 flex flex-col items-center justify-center space-y-6 py-8">
              <div className="text-center space-y-4">
                <div className="p-4 rounded-full bg-gradient-to-br from-purple-100 to-blue-100 w-fit mx-auto">
                  <Brain className="h-12 w-12 text-purple-600" />
                </div>
                <div>
                  <h3 className="text-lg font-semibold">Ready to Analyze</h3>
                  <p className="text-muted-foreground max-w-md">
                    Our AI will analyze {employee.name}'s performance data, work history, and metrics to provide 
                    personalized insights and optimization recommendations.
                  </p>
                </div>
              </div>

              <div className="grid grid-cols-2 gap-4 w-full max-w-md">
                <div className="text-center p-3 rounded-lg border">
                  <div className="text-2xl font-bold text-blue-600">
                    {employee.performanceMetrics?.totalTasksCompleted || 0}
                  </div>
                  <div className="text-xs text-muted-foreground">Tasks Completed</div>
                </div>
                <div className="text-center p-3 rounded-lg border">
                  <div className="text-2xl font-bold text-green-600">
                    {employee.performanceMetrics?.efficiency || 0}%
                  </div>
                  <div className="text-xs text-muted-foreground">Efficiency</div>
                </div>
                <div className="text-center p-3 rounded-lg border">
                  <div className="text-2xl font-bold text-purple-600">
                    {employee.performanceMetrics?.rating || 0}/5
                  </div>
                  <div className="text-xs text-muted-foreground">Rating</div>
                </div>
                <div className="text-center p-3 rounded-lg border">
                  <div className="text-2xl font-bold text-orange-600">
                    {employee.workHistory?.length || 0}
                  </div>
                  <div className="text-xs text-muted-foreground">Work Entries</div>
                </div>
              </div>

              <Button 
                onClick={handleAnalyzeEmployee} 
                disabled={isAnalyzing}
                size="lg"
                className="bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700"
              >
                {isAnalyzing ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Analyzing with AI...
                  </>
                ) : (
                  <>
                    <Brain className="mr-2 h-4 w-4" />
                    Analyze with AI
                  </>
                )}
              </Button>
            </div>
          )}

          {error && (
            <div className="flex-1 flex flex-col items-center justify-center space-y-4 py-8">
              <div className="p-4 rounded-full bg-red-100">
                <AlertCircle className="h-12 w-12 text-red-600" />
              </div>
              <div className="text-center space-y-2">
                <h3 className="text-lg font-semibold text-red-900">Analysis Failed</h3>
                <p className="text-red-700 max-w-md">{error}</p>
              </div>
              <div className="flex gap-2">
                <Button onClick={handleAnalyzeEmployee} variant="outline">
                  <RefreshCw className="mr-2 h-4 w-4" />
                  Try Again
                </Button>
                <Button onClick={onClose} variant="ghost">
                  Close
                </Button>
              </div>
            </div>
          )}

          {analysisData && (
            <>
              <div className="flex items-center justify-between py-4 border-b">
                <div className="flex items-center gap-3">
                  <div className="p-2 rounded-lg bg-green-100">
                    <CheckCircle className="h-5 w-5 text-green-600" />
                  </div>
                  <div>
                    <h3 className="font-semibold">Analysis Complete</h3>
                    <div className="flex items-center gap-2 text-sm text-muted-foreground">
                      <User className="h-3 w-3" />
                      <span>{analysisData.employeeName}</span>
                      <span>â€¢</span>
                      <Calendar className="h-3 w-3" />
                      <span>{formatDate(analysisData.analysisDate)}</span>
                    </div>
                  </div>
                </div>
                <div className="flex gap-2">
                  <Button onClick={handleDownloadReport} variant="outline" size="sm">
                    <Download className="mr-2 h-3 w-3" />
                    Download
                  </Button>
                  <Button onClick={handleNewAnalysis} variant="outline" size="sm">
                    <RefreshCw className="mr-2 h-3 w-3" />
                    New Analysis
                  </Button>
                </div>
              </div>

              <ScrollArea className="flex-1 pr-4 overflow-y-scroll">
                <div className="prose prose-sm max-w-none py-4">
                  <ReactMarkdown
                    components={{
                      h1: ({ children }) => <h1 className="text-2xl font-bold mt-6 mb-4 text-gray-900">{children}</h1>,
                      h2: ({ children }) => <h2 className="text-xl font-semibold mt-5 mb-3 text-gray-800 border-b pb-2">{children}</h2>,
                      h3: ({ children }) => <h3 className="text-lg font-medium mt-4 mb-2 text-gray-700">{children}</h3>,
                      p: ({ children }) => <p className="mb-3 text-gray-600 leading-relaxed">{children}</p>,
                      ul: ({ children }) => <ul className="mb-4 ml-4 space-y-1">{children}</ul>,
                      ol: ({ children }) => <ol className="mb-4 ml-4 space-y-1">{children}</ol>,
                      li: ({ children }) => <li className="text-gray-600 list-disc">{children}</li>,
                      strong: ({ children }) => <strong className="font-semibold text-gray-800">{children}</strong>,
                      code: ({ children }) => <code className="bg-gray-100 px-1 py-0.5 rounded text-sm font-mono">{children}</code>,
                      blockquote: ({ children }) => <blockquote className="border-l-4 border-blue-200 pl-4 italic text-gray-600 my-4">{children}</blockquote>,
                    }}
                  >
                    {analysisData.analysis}
                  </ReactMarkdown>
                </div>
              </ScrollArea>
            </>
          )}
        </div>
      </DialogContent>
    </Dialog>
  )
}
